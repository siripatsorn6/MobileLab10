// ignore_for_file: avoid_print, deprecated_member_use

import 'package:flutter/material.dart';
import 'package:lab101/db_helper.dart';

class EditUserPage extends StatefulWidget {
  final Map<String, dynamic>? us;
  const EditUserPage({Key? key, @required this.us}) : super(key: key);
  @override
  _EditUserPageState createState() => _EditUserPageState();
  // receive data from the FirstScreen as a parameter

}

class _EditUserPageState extends State<EditUserPage> {
  final _form = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    final _id = TextEditingController(text: widget.us!['_id'].toString());
    final _name = TextEditingController(text: widget.us!['name'].toString());
    final _age = TextEditingController(text: widget.us!['age'].toString());
    final _salary =
        TextEditingController(text: widget.us!['salary'].toString());
    final _mobile =
        TextEditingController(text: widget.us!['mobile'].toString());
    return Scaffold(
      appBar: AppBar(
        title: const Text('Update User'),
      ),
      body: Form(
        key: _form,
        child: ListView(
          children: <Widget>[
            buildNameField(_name),
            buildAgeFiled(_age),
            buildSalaryFiled(_salary),
            buildMobileField(_mobile),
            ElevatedButton(
                child: const Text('Save'),
                onPressed: () async {
                  if (_form.currentState!.validate()) {
                    print('save button press');

                    Map<String, dynamic> row = {
                      DatabaseHelper.columnId: int.parse(_id.text),
                      DatabaseHelper.columnName: _name.text,
                      DatabaseHelper.columnAge: int.parse(_age.text),
                      DatabaseHelper.columnSalary: int.parse(_salary.text),
                      DatabaseHelper.columnMobile: _mobile.text,
                    };
                    final dbHelper = DatabaseHelper.instance;
                    final rowsAffected = await dbHelper.update(row);
                    print('updated $rowsAffected row(s)');
                    Navigator.pop(context);
                  } else {
                    Scaffold.of(_form.currentContext!).showSnackBar(
                      const SnackBar(
                        content: Text('Please validate value'),
                      ),
                    );
                  }
                })
          ],
        ),
      ),
    );
  }

  TextFormField buildAgeFiled(TextEditingController _age) {
    return TextFormField(
        controller: _age,
        //  initialValue: widget.us['age'].toString(),
        keyboardType: TextInputType.number,
        decoration: const InputDecoration(
          labelText: 'age',
          icon: Icon(Icons.list),
        ),
        validator: (value) {
          if (value!.isEmpty) {
            return 'Please fill in age';
          } else {
            int age = int.parse(value);
            if (age < 0) {
              return 'Please fill in age';
            } else {
              return null;
            }
          }
        });
  }

  TextFormField buildSalaryFiled(TextEditingController _salary) {
    return TextFormField(
        controller: _salary,
        //  initialValue: widget.us['salary'].toString(),
        keyboardType: TextInputType.number,
        decoration: const InputDecoration(
          labelText: 'salary',
          icon: Icon(Icons.money),
        ),
        validator: (value) {
          if (value!.isEmpty) {
            return 'Please fill in salary';
          } else {
            int salary = int.parse(value);
            if (salary < 0) {
              return 'Please fill in salary';
            } else {
              return null;
            }
          }
        });
  }

  TextFormField buildNameField(TextEditingController _name) {
    return TextFormField(
      controller: _name,
      //   initialValue: widget.us['name'],
      decoration: const InputDecoration(
        labelText: 'name',
        icon: Icon(Icons.people),
      ),
      validator: (value) => value!.isEmpty ? 'Please fill in name' : null,
    );
  }

  TextFormField buildMobileField(TextEditingController _mobile) {
    return TextFormField(
      controller: _mobile,
      //   initialValue: widget.us['mobile'],
      decoration: const InputDecoration(
        labelText: 'mobile',
        icon: Icon(Icons.phone),
      ),
      validator: (value) => value!.isEmpty ? 'Please fill in mobile' : null,
    );
  }
}
